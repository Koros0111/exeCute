#! /bin/bash


mainFunction () {
	lowercaseName="${file,,}"
	type="$(file --brief "${file}")"
	mime="$(file --brief --mime-type "${file}")"
	group="$(echo "${mime}" | cut --delimiter='/' --fields=1)"

	if hasSubstring "${type}" "MS-DOS executable" &&
	! hasSubstring "${type}" "Windows" ||
	[[ "${group}" == "text" && "${lowercaseName: -4}" == ".bat" ]]; then
		so dosbox -c "$(mounts)" "${file}" -fullscreen -exit
	elif [[ "${mime}" == "application/x-dosexec" ]]; then
		notify-send "Launching $(basename "${file}")" --icon="exeCute" --expire-time="10000"
		prepareWineEnvironment
		so wine start /unix "${file}"
	else
		echo "Not an exe or a bat: ${file}" >&2
		exit 1
	fi
}


checkFileExist () {
	if [[ ! -f "${file}" ]]; then
		echo "File doesn't exist: ${file}" >&2
		exit 1
	fi
}


checkFileNotEmpty () {
	if [[ -z "${file}" ]]; then
		echo "No file specified" >&2
		echo "Either type: exeCute \"pathToYourExeFile\""
		echo "Or just open with exeCute from the file manager"
		exit 1
	fi
}


cleanupSynth () {
	if [[ -n "${synth}" ]]; then
		kill -KILL "${synth}"
		wait "${synth}" 2>/dev/null
	fi
}


cleanupWineEnvironment () {
	cleanupSynth
	restoreResolution
}


currentResolution () {
	xdpyinfo |
	grep dimensions |
	cut --delimiter=' ' --fields=7
}


desktopsLine () {
	local userReg="${1}"

	local line; line="$(
		grep --line-number "Desktops" "${userReg}" |
		cut --delimiter=':' --fields=1
	)"

	if [[ -n "${line}" ]]; then
		line="$((line + 2))"
		echo "${line}"
	fi
}


hasSubstring () {
	local string="${1}"
	local substring="${2}"

	echo "${string}" | grep --quiet "${substring}"
}


isos () {
	find . -type f \
		\( \
			-iname "*.iso" -or \
			-iname "*.cue" -or \
			-iname "*.gog" \
		\) |
	sort |
	xargs
}


mounts () {
	isos="$(isos)"

	if [[ -z "${isos}" ]]; then
		echo "mount d ."
	else
		notifyDiskChangeShortcut "${isos}"
		echo "imgmount d ${isos} -t iso"
	fi
}


notifyDiskChangeShortcut () {
	readarray -t isoList < <(args "${@}")

	if [[ "${#isoList[@]}" -gt 1 ]]; then
		notify-send "For changing disk use: Ctrl+F4" --icon="gtk-cdrom" --expire-time="10000"
		sleep 10
	fi
}


prepareEnvironment () {
	set -e
	file="$(args "${@}")"
	checkFileNotEmpty
	checkFileExist
	cd "$(dirname "${file}")"
}


prepareWineEnvironment () {
	previousResolution="$(currentResolution)"
	trap "cleanupWineEnvironment" INT TERM QUIT ERR EXIT
	setDesktopResolution
	startSynth
	export WINEDEBUG=err+all,fixme-all,warn-all,trace-all
}


restoreResolution () {
	so xrandr --size "${previousResolution}"
}


setDesktopResolution () {
	local targetResolution; targetResolution="$(targetResolution)"

	if [[ -z "${targetResolution}" ]]; then
		setVirtualDesktopResolution ""
	elif ! xrandr | grep --quiet "${targetResolution}"; then
		echo "desktop.conf: Unsupported resolution: ${targetResolution}" >&2
	else
		setVirtualDesktopResolution "${targetResolution}"
		so xrandr --size "${targetResolution}"
	fi
}


setVirtualDesktopResolution () {
	local targetResolution="${1}"
	local userReg="${HOME}/.wine/user.reg"

	if [[ ! -f "${userReg}" ]]; then
		wine - &> /dev/null || true
	fi

	local line; line="$(desktopsLine "${userReg}")"

	if [[ -z "${line}" ]]; then
		# shellcheck disable=SC2129
		echo '[Software\\Wine\\Explorer\\Desktops] 1635388843' >> "${userReg}"
		echo '#time=1d7cba5344b505e' >> "${userReg}"
		# shellcheck disable=SC2086
		echo '"Default"="'${targetResolution}'"' >> "${userReg}"
	else
		sed --in-place "${line}s/.*/\"Default\"=\"${targetResolution}\"\n/" "${userReg}"
	fi
}


so () {
	/bin/so "-${FUNCNAME[1]}" "${@}"
}


startSynth () {
	synth=""

	if ! userProcessIsRunning "$USER" "fluidsynth"; then
		fluidsynth -si -a alsa -m alsa_seq -C no -g 0.5 -L 1 -r 48000 -R yes -z 1024 \
			-o synth.default-soundfont="/usr/share/soundfonts/GeneralUser.sf2" &> /dev/null &
		synth="$!"
	fi
}


targetResolution () {
	local fileDir; fileDir="$(dirname "${file}")"
	local conf="${fileDir}/desktop.conf"
	local targetResolution=""

	if [[ -f "${conf}" ]]; then
		targetResolution="$(cat "${conf}")"

		if [[ -z "${targetResolution}" ]]; then
			targetResolution="$(currentResolution)"
		fi
	fi

	echo "${targetResolution}"
}


userProcessIsRunning () {
	local user="${1}"
	local process="${2}"

	pgrep -u "${user}" |
	grep --quiet "${process}"
}


prepareEnvironment "${@}"
mainFunction
